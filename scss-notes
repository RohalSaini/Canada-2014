cheat code 1: for fontsize,margin,padding
here are creating the different font size using maths

/ best technique
$base-font-size: 1rem;
$font-size-sm : $base-font-size * .75;
$font-size-lg: $base-font-size * 1.5;
$font-size-xl: $base-font-size * 2;
$font-size-xxl: $base-font-size* 3;



cheat code 2: create the color,margin,padding plaetete  for easy asssesing
// color map platette
$colors: (
    "primary": $primary_color,
    "secondary": $secondary,
    "error": $error,
    "info": $info,
    "blue": #1919e6,
    "red": red,
    "green": green,
    "white": white,
    black: black
);

// gettitng value from map
.test-btn {
    background-color: map-get($colors,"blue");
}


@debug map-get($colors, $key:"green" );
@debug map-has-key($map: $colors, $key:"secondary" );
@debug map-has-key($map: $colors, $key:"tertairy" );
@debug map-remove($map: $colors, $key: "red" ); // remicing red entry from map
@debug map-merge($map1: $colors,$map2: ("pink": pink));
@debug map-has-key($map: $colors, $key:"pink" );



cheat code 3:  here we are crating the autmatic color bg and text color from platette

@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }
}

// here we can use at its best  
<p class=" bg-primary text-white">Helloe </p>


example:
text-primary { }
bg-primary {}


cheat code 4: creating light varition for each coloe and dark variabtion for each color.


 
@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }

    // light variation
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
          color: mix(white,$val, $i *10)
        }
        .bg-#{$key}-light-#{$i} {
            background-color: mix(white,$val,$i * 10);
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
}

example:
<span class="bg-primary-dark8 text-white"> </span>


code 5 : if else statment.
we will not create the variation for white and black
@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }

    @if($val != black and $val != white) {
  
    // light variation
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
          color: mix(white,$val, $i *10)
        }
        .bg-#{$key}-light-#{$i} {
            background-color: mix(white,$val,$i * 10);
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
    }
}


code 6: parent Selectors ==> for hovers.


@each $key, $val in $colors {
    @if($val != black and $val != white) {
  
    // light variation
    @for $i from 1 through 9 {
        .text-hover-#{$key}-light-#{$i}{
            &:hover {
                color: mix(white,$val, $i *10)
            }
        }
        .text-hover-#{$key}-dark-#{$i}{
            &:hover {
                color: mix(black,$val, $i *10)
            }
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
    }
}

example:




code 7: mixins to reuse the btn code with definition defalt color
btn-primary,btn-secondary,btn-error,btn-info,
btn-outlined-primary,btn-outlined-secondary,btn-outlined-error



<button class="btn-primary  text-white text-hover-white">Click ME!</button>
<button class="btn text-white">Click ME!</button>
<button class="btn-outlined-primary  text-primary text-hover-white">Click ME!</button>
::





cheat code 1: for fontsize,margin,padding
here are creating the different font size using maths

/ best technique
$base-font-size: 1rem;
$font-size-sm : $base-font-size * .75;
$font-size-lg: $base-font-size * 1.5;
$font-size-xl: $base-font-size * 2;
$font-size-xxl: $base-font-size* 3;



cheat code 2: create the color,margin,padding plaetete  for easy asssesing
// color map platette
$colors: (
    "primary": $primary_color,
    "secondary": $secondary,
    "error": $error,
    "info": $info,
    "blue": #1919e6,
    "red": red,
    "green": green,
    "white": white,
    black: black
);

// gettitng value from map
.test-btn {
    background-color: map-get($colors,"blue");
}


@debug map-get($colors, $key:"green" );
@debug map-has-key($map: $colors, $key:"secondary" );
@debug map-has-key($map: $colors, $key:"tertairy" );
@debug map-remove($map: $colors, $key: "red" ); // remicing red entry from map
@debug map-merge($map1: $colors,$map2: ("pink": pink));
@debug map-has-key($map: $colors, $key:"pink" );



cheat code 3:  here we are crating the autmatic color bg and text color from platette
here we are creating the different bg and text coloe just by coding...
exmaple:
text-primary,text-secondary,text-error ,text-info
bg-primary,bg-secondary,bg-error,bg-info

:::
@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }
}

// here we can use at its best  
<p class=" bg-primary text-white">Helloe </p>


example:
text-primary { }
bg-primary {}


cheat code 4: creating light varition for each coloe and dark variabtion for each color.
example:
text-primary-light-1-9, text-secondary-light-1-9
bg-primary-light-1-9,bg-secondary-light-1-9

text-primary-dark-1-9, text-secondary-dark-1-9
bg-primary-dark-1-9,bg-secondary-dark-1-9
:::

 
@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }

    // light variation
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
          color: mix(white,$val, $i *10)
        }
        .bg-#{$key}-light-#{$i} {
            background-color: mix(white,$val,$i * 10);
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
}

example:
<span class="bg-primary-dark8 text-white"> </span>


code 5 : if else statment.
we will not create the variation for white and black for dark and ligght version
@each $key, $val in $colors {
    .text-#{$key} {
        color: $val
    }
    .bg-#{$key} {
        background-color: $val;
    }

    @if($val != black and $val != white) {
  
    // light variation
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
          color: mix(white,$val, $i *10)
        }
        .bg-#{$key}-light-#{$i} {
            background-color: mix(white,$val,$i * 10);
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
    }
}


code 6: parent Selectors ==> for hovers.
example:
text-hover-primary-light-1-9,text-hover-secondary-light-1-9,
text-hover-primary-dark-1-9,text-hover-secondary-dark-1-9
text-primary-dark-1-9,text-secondary-dark-1-9
bg-primary-dark-1-9,bg-secondary-dark-1-9
::

@each $key, $val in $colors {
    @if($val != black and $val != white) {
  
    // light variation
    @for $i from 1 through 9 {
        .text-hover-#{$key}-light-#{$i}{
            &:hover {
                color: mix(white,$val, $i *10)
            }
        }
        .text-hover-#{$key}-dark-#{$i}{
            &:hover {
                color: mix(black,$val, $i *10)
            }
        }
    }
        // dark variation
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
              color: mix(black,$val, $i *10)
            }
            .bg-#{$key}-dark-#{$i} {
                background-color: mix(black,$val,$i * 10);
            }
        }
    }
}

example:
<a href="#" class="text-primary text-hover-red-light-1">hover me!!</a>



code 6: mixins:
@mixin btn($bg-color: #e2e2e2) {
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding *2;
        border-radius: $base-border-radius;
        background-color: $bg-color;
}

.btn {
    @include btn();
}

@each $key , $val in $colors {
    .btn-#{$key} {
        @include btn($val);
        &:hover {
            background-color: lighten($color: $val, $amount: 5);
        }
    }
    .btn-outlined-#{$key} {
        @include btn(#fff);
        border: $base-border-thickness solid $val;
        &:hover {
            background-color: $val;
        }
    }
}


example:
<button class="btn-primary  text-white text-hover-white">Click ME!</button>
<button class="btn text-white">Click ME!</button>
<button class="btn-outlined-primary  text-primary text-hover-white">Click ME!</button>


code: 7: functions:
btn-complement
@each $key , $val in $colors {
    .btn-#{$key} {
        @include btn($val);
        &:hover {
            background-color: lighten($color: $val, $amount: 5);
        }
    }
    .btn-outlined-#{$key} {
        @include btn(#fff);
        border: $base-border-thickness solid $val;
        &:hover {
            background-color: $val;
        }
    }
    .btn-complement-#{$key} {
        @include btn($val);
        color: light-comp($val);
        &:hover {
            color: $val;
            background-color: light-comp($val);
        }
    }
}


function for this::

@function light-comp($color) {
    $complement: complement($color);
    $light-complement: lighten($complement,30%);
    @return $light-complement;
}

example:
btn-complement-primary, btn-complement-secondary

<button class="btn-complement-primary  text-white tez">Click ME!</button>


code 8: making utility classes:
// m-4 pl-3 o-40
utility.scss file name::
::
@use 'sass:math';

$utility:(
    "padding": (
        "prefix": "p",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8
        )
    ),
    "padding-left": (
        "prefix": "pl",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8
        )
    ),"padding-top": (
        "prefix": "pt",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8
        )
    ),"padding-bottom": (
        "prefix": "pb",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8
        )
    )
);

// Generating the utility classes
@each $property, $map in $utility {
    $prefix: map-get($map, "prefix");
    $values: map-get($map, "values");

    @each $k, $v in $values {
        @if ($k == "default") {
            .#{$prefix} {
                #{$property}: $v;
            }
        } @else {
            .#{$prefix}-#{$k} {
                #{$property}: $v;
            }
        }
    }
}


code 9: breakpoints:
$breakpoints: (
  "xs": 0,
  "sm": 480px,
  "md": 720px,
  "lg": 960px,
  "xl": 1200px,
);

@mixin xs {
  @media (min-width: map-get($breakpoints, "xs")) {
    @content;
  }
}

@mixin sm {
  @media (min-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@mixin md {
  @media (min-width: map-get($breakpoints, "md")) {
    @content;
  }
}

@mixin lg {
  @media (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

@mixin xl {
  @media (min-width: map-get($breakpoints, "xl")) {
    @content;
  }
}

@mixin breakpoint($bp: 0) {
  @media (min-width: $bp) {
    @content;
  }
}

.responsive-test {
  @include xs {
    color: red;
  }
  @include sm {
    color: blue;
  }
  @include md {
    color: green;
  }
  @include lg {
    color: purple;
  }
  @include xl {
    color: orange;
  }
  @include breakpoint(1400px) {
    color: pink;
  }
}

example how to use:
<!-- grid system -->
<div class="responsive-test">changing colors</div>


code: 9
@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

example:

<div class="container">
    <!-- grid system -->
    <h2 class="mb-2">Grid System</h2>
    <div class="row gap-2 justify-center">
      <div class="col-12-xs col-5-sm col-3-xl">
        <div class="card">
          <h3 class="card-title">Hello, ninjas</h3>
          <p class="card-body">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</p>
        </div>
      </div>
      <div class="col-12-xs col-5-sm col-3-xl">
        <div class="card">
          <h3 class="card-title">Hello, ninjas</h3>
          <p class="card-body">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</p>
        </div>
      </div>
      <div class="col-12-xs col-5-sm col-3-xl">
        <div class="card">
          <h3 class="card-title">Hello, ninjas</h3>
          <p class="card-body">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</p>
        </div>
      </div>
      <div class="col-12-xs col-5-sm col-3-xl">
        <div class="card">
          <h3 class="card-title">Hello, ninjas</h3>
          <p class="card-body">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</p>
        </div>
      </div>
    </div>

  </div>


code 10: navbar :: with extend keywords ??

%flex-layout {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}

.navbar {
  @extend %flex-layout;
  padding: $base-padding $base-padding * 2;
  box-shadow: $base-box-shadow;
  .site-title {
    font-size: $font-size-lg;
  }
  .container {
    @extend %flex-layout;
  }
}

@each $key, $val in $colors {
  .navbar-#{$key} {
    @extend .navbar;
    background-color: $val;
  }
}

example:
<nav class="navbar-primary text-white mb-4">
    <div class="container">
      <h2 class="site-title">Shinobi CSS</h2>
      <p>A lightweight CSS library for dev ninjas</p>
    </div>
  </nav>


code 10: homepage
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/index.css">
  <title>My Portfolio</title>
</head>
<body>
  
  <!-- navbar -->
  <nav class="navbar justify-between">
    <div class="container">
      <h1 class="site-title">Shinobi Designs</h1>
      <ul class="display-f">
        <li class="ml-1 text-hover-secondary"><a href="#work">Our Work</a></li>
        <li class="ml-1 text-hover-secondary"><a href="#about">About Us</a></li>
      </ul>
    </div>
  </nav>

  <!-- intro -->
  <div class="container mt-5">
    <div class="row justify-center">
      <div class="col-12-xs col-5-md">
        <h2>
          <div class="font-xxl">Black-Belt</div>
          <div class="font-xxl text-secondary">Your Website</div>
        </h2>
        <p class="text-gray mt-2 mb-3">Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        <a href="#work" class="btn-outlined-secondary text-secondary text-hover-white">View Our Work</a>
      </div>
      <div class="col-12-xs col-5-md">
        <img src="/img/laptop.svg" alt="">
      </div>
    </div>
  </div>

  <!-- about -->
  <section id="about" class="bg-secondary-light-9 mt-5 pt-4 pb-4">
    <div class="container">
      <h2 class="mb-2">About Shinobi Designs</h2>
      <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Culpa ipsam animi aliquid sequi fuga, nam nesciunt dolore libero dolorem exercitationem aliquam cupiditate atque illo, quae dicta doloribus et? Ab ipsam inventore quam asperiores, sequi unde tenetur accusamus, distinctio magni necessitatibus quis deserunt id alias. Iste eum ea labore rerum voluptatibus.</p>
      <p class="mt-1">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Soluta nam, corrupti dolorum inventore perspiciatis id illum repellat iste amet sapiente ducimus nihil molestias quasi, totam, ratione minima molestiae blanditiis iure consequatur praesentium debitis. Nulla maiores doloremque tempore nobis dolorum amet!</p>
    </div>
  </section>

  <!-- work section -->
  <section id="work" class="mt-5">
    <div class="container">
      <h2 class="mb-2">Some of Our Work</h2>
      <div class="row gap-2">
        <div class="col-12-xs col-6-md col-3-lg">
          <div class="card p-0">
            <h3 class="card-title m-1">Mario Club</h3>
            <img src="/img/mario.png" alt="">
            <p class="m-1">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Totam, hic!</p>
          </div>
        </div>
        <div class="col-12-xs col-6-md col-3-lg">
          <div class="card p-0">
            <h3 class="card-title m-1">Ninja Food</h3>
            <img src="/img/food.png" alt="">
            <p class="m-1">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Totam, hic!</p>
          </div>
        </div>
        <div class="col-12-xs col-6-md col-3-lg">
          <div class="card p-0">
            <h3 class="card-title m-1">Just Add Marmite</h3>
            <img src="/img/marmite.png" alt="">
            <p class="m-1">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Totam, hic!</p>
          </div>
        </div>
        <div class="col-12-xs col-6-md col-3-lg">
          <div class="card p-0">
            <h3 class="card-title m-1">Ninja Notes</h3>
            <img src="/img/notes.png" alt="">
            <p class="m-1">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Totam, hic!</p>
          </div>
        </div>
      </div>
      <div class="row justify-center mt-2">
        <button class="btn-secondary text-white font-md">View All</button>
      </div>
    </div>
  </section>

  <!-- footer -->
  <footer class="bg-gray-light-7 pt-3 pb-3 mt-5">
    <div class="container">
      copyright 2021 Shinobi Designs
    </div>
  </footer>
</body>
</html>

::
code 11: customize the UI theme
// customize theme variables
$secondary: indigo;
$base-padding: 1rem;
$base-border-thickness: 3px;

@import 'shinobi';

changes in _variable.scss
// theme colors
$primary: #326dee !default;
$secondary: #1ac886 !default;
$error: #d32752 !default;
$info: #f6c31c !default;

// color palette
$colors: (
  "primary": $primary,
  "secondary": $secondary,
  "error": $error,
  "info": $info,
  "blue": #1919e6,
  "red": #e61919,
  "yellow": #e6e619,
  "green": #19e635,
  "orange": #ffa600,
  "purple": #9900ff,
  "gray": #808080,
  "black": black,
  "white": white,
) !default;

// spacing
$base-padding: 0.75rem !default;
$base-margin: 0.75rem !default;

// borders
$base-border-thickness: 1px !default;
$base-border-radius: 20px !default;

// box-shadow
$base-box-shadow: 1px 3px 5px rgba(0,0,0,0.1) !default;

// font sizes
$base-font-size: 1rem !default;
$font-size-sm: $base-font-size * 0.75 !default;
$font-size-lg: $base-font-size * 1.5 !default;
$font-size-xl: $base-font-size * 2 !default;
$font-size-xxl: $base-font-size * 3 !default;


:::
code 12: last :: Adding badge
@use 'sass:math';

@mixin badge($bg-color: $info) {
  border-radius: $base-border-radius * 4;
  background-color: $bg-color;
  padding: math.div($base-padding, 4) math.div($base-padding, 2);
  font-size: $font-size-sm;
  font-weight: normal;
}

.badge {
  @include badge;
}

@each $key, $val in $colors {
  .badge-#{$key}{
    @include badge($val);
  }
}

::
<h3 class="card-title m-1">
    Mario Club <span class="badge-orange text-white ml-1">new</span>
</h3>





